#!/usr/bin/env python

import csv, sys

def get_json(file):
    import json
    return json.load(open(file, 'r'))

def gen_guess(a=0, b=0, c=0, d=0, e=0, f=0, t=0):
    '''generate a guess structure -- a name and a lambda...

currently has the following forms
    1. factorial -- if f is specified, uses f*x!
    2. 2^n -- if t is specified
    3. otherwise, a quartic: ax^4 + bx^3 + cx^2 + dx + e
'''
    if f:
        import math
        return ['%g * x!' % f, lambda x: f * math.factorial(x)]
    if t:
        return ['%g * 2^x' % t, lambda x: t * 2 ** x]

    fun = lambda x: a * x**4 + b * x**3 + c * x**2 + d * x + e
    labels = []
    if a: labels.append('%g*x^4' % a)
    if b: labels.append('%g*x^3' % b)
    if c: labels.append('%g*x^2' % c)
    if d: labels.append('%g*x' % d)
    if e: labels.append('%g' % e)
    return [' + '.join(labels), fun]

def get_guesses(guessfile):
    '''load guessfile and gen_guess the data'''

    guesses=get_json(guessfile)

    for key in guesses.iterkeys():
        input = guesses[key]
        if type(input) is not list:
            input = [input]
        guesses[key] = map((lambda x: gen_guess(**x)), input)

    return guesses

def gen_plot(data, filename, guesses=None):
    import matplotlib.pyplot as plt

    x = data['n_values']
    names = data['names']

    colors = ['green', 'cyan', 'red']

    plt.figure()
    plt.title('Performance data for ' + ', '.join(names))
    plt.xlabel('value of n')
    ticks = x
    divisor = 1
    while len(ticks) / divisor > 20:
        divisor += 1
        ticks = x[::divisor]

    plt.xticks(ticks)
    plt.ylabel('seconds (for many runs)')

    lines = []

    for algorithm in names:
        c = colors.pop(0)

        line_data = map((lambda x: None if x < 0 else x),
            data['data'][algorithm])

        line, = plt.plot(x, line_data,
                         label=algorithm,
                         linestyle='-', color=c)
        lines.append(line)
        if guesses:
            for guess in guesses[algorithm]:
                guess_name, guess_fun = guess
                guessline, = plt.plot(x, [guess_fun(i) for i in x],
                                      label=guess_name,
                                      linestyle='--', color=c)
                lines.append(guessline)

    plt.legend(handles=lines, loc=2)

    print 'Saving plot to', filename
    plt.savefig(filename)
    plt.close()

if len(sys.argv) == 1:
    raise RuntimeError("need to specify data files")

for arg in sys.argv[1:]:
    from mycsv import slurp
    from os.path import isfile
    base = '.'.join(arg.split('.')[:-1])

    print arg, '=>', base

    data = slurp(arg)
    gen_plot(data, base+'-basic.png')
    guessfile = base + '.guesses'

    if isfile(guessfile):
        gen_plot(data, base+'-guesses.png',
            guesses=get_guesses(guessfile))
