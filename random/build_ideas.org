#+HTML_HEAD_EXTRA: <link rel="custom stylesheet" type="text/css" href="http://www.daveltd.com/style/org-mode.css" />
#+TITLE: Project Ideas for Hackbright Build Day
# is there a way to set this just for markdown, and leave it on for html?
#+OPTIONS: toc:2

* Application ideas!
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: stuff
    :END:
Here are some ideas for projects one could build, with a description
of a basic Minimum Viable Product (MVP), plus varying components that
would add complexity, should you wish to take this app beyond MVP status.

It's totally OK to take these project ideas home with you!  Continue
work on what you start here today, or start another one; it's up to
you. :) And of course, you can also work on whatever projects you
already have ideas for, even if you've already started.  It's a day to
build, whatever and however you like, with the support of peers and
someone to ask questions of.

If you do finish an MVP and/or extra components today, /great/!  AND
also know that it's totally fine to need more time!  The few hours we
have set aside today are not a lot of time -- especially if you're
trying for all the components in an app!

Also, for the purposes of today's exercise, having this be a
multi-user app is considered a bonus, rather than part of the MVP.
The idea is to have you build something that does something in a way
that can be used by /someone/.  Without supporting multiple accounts,
most apps won't be "viable" in a release-it-to-the-world way, but they
sure will be for the purposes of a learning exercise.  That said, it's
recommended that you keep in mind what would have to be different to
make it multi-user if you don't start out that way.

Without further ado, here are a few app ideas:

** To-do list app

An app for keeping track of things one needs to do.

*** MVP requirements

- Allow the entry of new items that might need doing.
- Store such items in a database, so they can be retrieved later.
- Present a list of stored items.
- Have a way to mark an item completed.
- Alter the display of or remove an item which is marked completed.

*** Bonus functionalities

Feel free to add any one or as many as you like of the following:

- Provide a way to delete an item, instead of just completing it.
- Allow a user to edit the description of an item.
- Have accounts and login/logout, with items stored privately for each user.
- slick AJAX-y interface, where items get +struck through+ and perhaps gradually fade from screen.
- an "undo" for completions or deletions.
- due-dates for items
- contexts for items (e.g. one item is something to buy at a grocery
  store, and you'd only see it when looking at a grocery list; another
  item is a phone call you need to make; and another is something you
  have to do at home.)

** Tic Tac Toe (goal: to build using React)

An app to do tic-tac-toe in the browser.  Note that there's a tutorial
for doing exactly this on the react web page:
https://facebook.github.io/react/tutorial/tutorial.html

*** MVP requirements

- Display a 3x3 grid
- when clicking on a square in the grid, change it to an X or an O
- toggle between X and O

*** Bonus functionalities

- have a server backend that allows two people to play against each
  other, one getting X, and one getting O.  Keep track of turns.

** Filter for certain events, such as Career Fairs, using the Eventbrite API (goal: to build using APIs)

Something to look through Eventbrite events, and search for certain
kinds of events.

*** MVP requirements

- connect with the Eventbrite API
- get a list of events
- filter either or both of:
  - at the API level
  - within the app

** Display data on meteors (goal: to build using D3)

Get data from an external source about meteors, and display a visual
representation of them using D3

*** MVP requirements

- get the data [I think I have a link somewhere; I'll try to get it if
  you choose this project.]

** Chat application between 2 people
** Chatbot
