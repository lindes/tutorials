# -*- mode: org -*-
#+TITLE: Vagrant Configurations for easy project starts
#+OPTIONS: footer:nil
#+OPTIONS: html-postamble:nil style-include-scripts:nil

* Introduction

This tree within the [[https://github.com/lindes/tutorials][tutorials]] I'm doing is meant to contain [[https://www.vagrantup.com/][Vagrant]]
configurations for various sorts of projects one might want to do, so
that one can get a quick start working on the core of a project,
without having to go through the (sometimes-easy,
sometimes-cumbersome) installation process.  (For the curious, you can
still inspect how things are done by looking at the "provisioning"
portions of the file.)

* Helpers before you get started

** Creating a ~subl~ alias:

If you don't already have a ~subl~ alias, try the following command:

#+BEGIN_SRC shell
  ln -si "$(/bin/ls -1 /Applications/Sublime\ Text*.app/Contents/SharedSupport/bin/subl | tail -1)" /usr/local/bin
#+END_SRC

Hopefully that will do the trick; if it does not, there's more
information about creating the alias [[https://stackoverflow.com/a/16495202/313756][on stackoverflow]], just know that
sometimes it's something like ~Sublime Text 2~ or ~Sublime Text 3~
instead of merely ~Sublime Text~. You'll have to see what it is on the
system you're on; or feel free to ask.  Or just open Sublime first,
and open the directory you're in from there.

* Specific Vagrant configurations:

** React

Using the Vagrant file in the react/ subdirectory, use the following
steps.  Steps 1 and 2 are optional, but recommended:

*** Full version:

(See below for more-or-less copy/paste-able version.)

1. Copy the Vagrantfile into a directory (possibly creating it first)
   where you intend to do the work of this project.
2. If you haven't already, run ~git init~ there.  And ~git add~ the
   Vagrantfile.  (~git commit~ either now or later, as you prefer.)
3. Run ~vagrant up~.
4. Wait.  :) /(But you can do step 5 from another shell while you
   wait.)/
5. Run ~subl .~, just to open Sublime for the folder you're in.  (If
   you don't already have the ~subl~ alias, you can create it or open
   it differently; see instructions for that, above).  Once you've
   open that, switch back to the shell for the next few steps.
6. Run ~vagrant ssh~.
7. Move into the ~src~ directory (~cd src~).  This will be
   automatically (according to the ~synced_folder~ directive that's in
   the Vagrantfile) be synchronized with the directory on the
   filesystem where Vagrantfile lives in the "host" computer (the Mac
   or Windows box where you're running all this).
8. Follow the [[https://reactjs.org/tutorial/tutorial.html#if-you-prefer-to-write-code-in-your-editor][tic-tac-toe tutorial instructions]], */starting at step
   2/* (you don't even need to read the text above that), but ignoring
   the "installation instructions" link, as the commands right below
   that on the page are all you'll need to do.
9. Proceed from there!  (You can switch back and forth to Sublime to
   edit files, as desired.)  Happy hacking!

*** TL;DR / copy-paste-friendly version:

    (Note: It is recommended that if you actually copy/paste this, you do
    so one line at a time.)

    #+BEGIN_SRC shell
      cd ~/src               # or wherever you want to start
      mkdir some_new_project # change this to whatever makes sense for you
      git init .             # creating a new git repo for this
      curl -O https://raw.githubusercontent.com/lindes/tutorials/master/vagrants/react/Vagrantfile
      git add Vagrantfile
      git commit -m 'Vagrantfile from github/lindes/tutorials/'
      subl .                 # then come back to the shell; see full doc if you don't have subl alias
      vagrant up             # and wait a while, maybe reading Vagrantfile to see what it's up to while you do
      vagrant ssh
      cd src
      # then follow directions linked above, starting with:
      npm install -g create-react-app
      create-react-app my-app
    #+END_SRC

** Rails

[Instructions and Vagrantfile yet to be written.]

** Flask

There's now a ~Vagrantfile~ (and a very simple ~server.py~) in the
[[./flask][flask]] subdirectory, which can set up a simple flask server with either
Python 2 or Python 3.  (Set the ~want_python_3~ variable near the top
of the Vagrantfile to true if you want Python 3, otherwise it will use
Python 2.)  If you want to have an environment similar to what you had
for the Hackbright curriculum, you'll also want to install postgresql;
see the comments in the "[[https://www.vagrantup.com/docs/provisioning/][provisioning]]" section.

** more to come?

What other environments would folks like here?
